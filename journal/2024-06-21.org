#+TITLE: Fri, 2024-06-21
* TODO Job search
** TODO amazon
** TODO microsoft
** TODO Cariad (VW)
** TODO linkedin
*** TODO fpga
*** TODO amazon dsp
** TODO NVidia
** TODO Aptiv
** TODO Tesla
** DONE UniTree
- State "DONE"       from "TODO"       [2024-06-03 Mon 16:57]
* TODO 领失业救济金
** DONE 五月
- State "DONE"       from "TODO"       [2024-06-03 Mon 16:54]
** TODO 六月
* TODO devel
** DEFERRED streamlit
- State "DEFERRED"   from "TODO"       [2024-06-03 Mon 16:52] \\
  not urgent, after job seeking
** DONE documentation of eos, dataflow_io,
- State "DONE"       from "TODO"       [2024-06-03 Mon 16:56]
** TODO Wavenet
** TODO T5 - transformer
** TODO rnn-lua
** TODO chronos
** TODO frequncy with VQ-VAE skills
** TODO quantization with entropy object
* 08:56 Aptiv Mockup Strategy (from scratch without any information of propriotary technology, basic, by no means to be exhaustive, open, for the current moment and exploratory, Engineering of AI, somewhat a little techical)
** in a piecemeal approach
** Algorithms
*** training (distillation, finetuning, self-/un-supervised, leveraging foundation models, hallucination measurement)
*** inference (embedded system, see in MLOps part)
*** investigation of algorithms with top-notch performance: measuring the gap (realtime, accuracy) between research and deployment
**** perception
***** depth, 3d: nerf, gaussian splatting, diffusion model
***** Generative model (inpainting, 3d information): measurement of the hallucination
**** planning and decision: offline reinforcement learning, agentic methods
*** existing project maintainenace development
** MLOps
*** ML abstraction layer between application and embedded hardware
**** C++(better for tweaking the HW): code base like, llama.cpp, model serialization format like gguf (shallow and verbose, easy to understand and search in)
**** mojo(better interface for application develper): develop mojo dialect for specific platforms and run directly in os; export to static/dynamic library (arm linux support since 24.01); transpile to c/c++
**** Compiler technology (more tailoring, but more expensive): MLIR, tvm: chip supplier like (TI) integrates into their SDK, work with suppliers
*** SoC selection
**** basic criterium: math operation support (matrix multiplicaiton, tensor operation, bandwidth, internal cache, operation fusion, sparsity, bf16)
**** tools, sdks availabity
**** evaluation by profiling: operators, bandwidth/compute/overhead, benchmarking test: mfu estimation, looking at the roofline model of benchmarking networks.
**** choose baseline platforms for development and reference
*** Data pipelines for collection/storage/search of functional data, runtime logging data: (ELK like stack + database + application wrapper)

** Overall thought
*** be declarative, not imperative
*** work on an abstract level --> understand
